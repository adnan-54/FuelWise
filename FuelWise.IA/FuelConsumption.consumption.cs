// This file was auto-generated by ML.NET Model Builder.
using System;
using Microsoft.Maui.Storage;
using Microsoft.ML;
using Microsoft.ML.Data;

namespace FuelWise_IA
{
    public partial class FuelConsumption
    {
        /// <summary>
        /// model input class for FuelConsumption.
        /// </summary>

        #region model input class

        public class ModelInput
        {
            [LoadColumn(1)]
            [ColumnName(@"VehicleSpeedInstantaneous")]
            public float VehicleSpeedInstantaneous { get; set; }

            [LoadColumn(2)]
            [ColumnName(@"VehicleSpeedAverage")]
            public float VehicleSpeedAverage { get; set; }

            [LoadColumn(4)]
            [ColumnName(@"VehicleSpeedVariation")]
            public float VehicleSpeedVariation { get; set; }

            [LoadColumn(6)]
            [ColumnName(@"EngineLoad")]
            public float EngineLoad { get; set; }

            [LoadColumn(7)]
            [ColumnName(@"EngineCoolantTemperature")]
            public float EngineCoolantTemperature { get; set; }

            [LoadColumn(8)]
            [ColumnName(@"ManifoldAbsolutePressure")]
            public float ManifoldAbsolutePressure { get; set; }

            [LoadColumn(9)]
            [ColumnName(@"EngineRPM")]
            public float EngineRPM { get; set; }

            [LoadColumn(10)]
            [ColumnName(@"MassAirFlow")]
            public float MassAirFlow { get; set; }

            [LoadColumn(11)]
            [ColumnName(@"IntakeAirTemperature")]
            public float IntakeAirTemperature { get; set; }

            [LoadColumn(13)]
            [ColumnName(@"FuelConsumptionAverage")]
            public float FuelConsumptionAverage { get; set; }

            [LoadColumn(14)]
            [ColumnName(@"RoadSurface")]
            public float RoadSurface { get; set; }

            [LoadColumn(15)]
            [ColumnName(@"Traffic")]
            public float Traffic { get; set; }

            [LoadColumn(16)]
            [ColumnName(@"DrivingStyle")]
            public float DrivingStyle { get; set; }
        }

        #endregion model input class

        /// <summary>
        /// model output class for FuelConsumption.
        /// </summary>

        #region model output class

        public class ModelOutput
        {
            [ColumnName(@"VehicleSpeedInstantaneous")]
            public float VehicleSpeedInstantaneous { get; set; }

            [ColumnName(@"VehicleSpeedAverage")]
            public float VehicleSpeedAverage { get; set; }

            [ColumnName(@"VehicleSpeedVariation")]
            public float VehicleSpeedVariation { get; set; }

            [ColumnName(@"EngineLoad")]
            public float EngineLoad { get; set; }

            [ColumnName(@"EngineCoolantTemperature")]
            public float EngineCoolantTemperature { get; set; }

            [ColumnName(@"ManifoldAbsolutePressure")]
            public float ManifoldAbsolutePressure { get; set; }

            [ColumnName(@"EngineRPM")]
            public float EngineRPM { get; set; }

            [ColumnName(@"MassAirFlow")]
            public float MassAirFlow { get; set; }

            [ColumnName(@"IntakeAirTemperature")]
            public float IntakeAirTemperature { get; set; }

            [ColumnName(@"FuelConsumptionAverage")]
            public float FuelConsumptionAverage { get; set; }

            [ColumnName(@"RoadSurface")]
            public float RoadSurface { get; set; }

            [ColumnName(@"Traffic")]
            public float Traffic { get; set; }

            [ColumnName(@"DrivingStyle")]
            public float DrivingStyle { get; set; }

            [ColumnName(@"Features")]
            public float[] Features { get; set; }

            [ColumnName(@"Score")]
            public float Score { get; set; }
        }

        #endregion model output class

        public static readonly Lazy<PredictionEngine<ModelInput, ModelOutput>> PredictEngine = new Lazy<PredictionEngine<ModelInput, ModelOutput>>(() => CreatePredictEngine(), true);

        private static PredictionEngine<ModelInput, ModelOutput> CreatePredictEngine()
        {
            var mlContext = new MLContext();
            using var stream = FileSystem.OpenAppPackageFileAsync("FuelConsumption.mlnet").GetAwaiter().GetResult();
            ITransformer mlModel = mlContext.Model.Load(stream, out var _);
            return mlContext.Model.CreatePredictionEngine<ModelInput, ModelOutput>(mlModel);
        }

        /// <summary>
        /// Use this method to predict on <see cref="ModelInput"/>.
        /// </summary>
        /// <param name="input">model input.</param>
        /// <returns><seealso cref=" ModelOutput"/></returns>
        public static ModelOutput Predict(ModelInput input)
        {
            var predEngine = PredictEngine.Value;
            return predEngine.Predict(input);
        }
    }
}